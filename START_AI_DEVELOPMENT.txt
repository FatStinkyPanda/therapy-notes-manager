=============================================================================
                        PANDA v3.0 - AI DEVELOPMENT GUIDE
              Developed by FatStinkyPanda - Github.com/FatStinkyPanda
=============================================================================

Welcome AI Developer! You are about to begin or continue a software project 
using PANDA v3.0 (Project Architecture & Networked Development Assistant).

CRITICAL FIRST STEPS:
1. Read PANDA_SYSTEM_v3.md to understand the complete PANDA system
2. Check if this is a new or existing project
3. Follow the appropriate protocol below

=============================================================================
                              PROJECT STATUS CHECK
=============================================================================

IF THIS IS A NEW PROJECT (No README.md exists):
1. Read PANDA_SYSTEM_v3.md completely
2. Ask user for project requirements:
   - Project name and type
   - Technology preferences
   - Key features needed
   - Any specific requirements
3. Generate complete PANDA structure
4. Create MAIN_README.md as blueprint
5. Initialize task management system
6. Generate initial TODO.md
7. Begin development

IF THIS IS AN EXISTING PROJECT (README.md exists):
1. Read PANDA_SYSTEM_v3.md for system understanding
2. Read MAIN_README.md for project blueprint
3. Read README.md for current state
4. Check tasks/TODO.md for active tasks
5. Review recent tasks/completed/ entries
6. Continue development from current state

=============================================================================
                           PANDA CORE PRINCIPLES
=============================================================================

1. DOCUMENTATION IS MEMORY
   - All project knowledge lives in files
   - You cannot remember anything between sessions
   - Files are your only memory persistence

2. SYSTEMATIC DEVELOPMENT
   - Follow task management system exactly
   - Document every change
   - Maintain integration tracking
   - Update cascades are mandatory

3. PRODUCTION QUALITY ONLY
   - No placeholders in code
   - Complete error handling
   - Full documentation
   - Comprehensive testing approach

4. DISTRIBUTED TASK MANAGEMENT
   - Tasks spread across multiple files
   - 25 tasks per file maximum
   - Automatic file creation at limits
   - Index files track everything

=============================================================================
                            DEVELOPMENT WORKFLOW
=============================================================================

YOUR CONTINUOUS WORKFLOW:

1. CHECK FOR TASKS
   - Look in tasks/TODO.md
   - If empty, generate new tasks
   - Select highest priority task

2. EXECUTE TASK
   - Read requirements completely
   - Implement with production quality
   - Create all necessary files
   - Include error handling
   - Update documentation

3. COMPLETE TASK
   - Move to tasks/completed/COMPLETED_XXX.md
   - Update COMPLETED_INDEX.md
   - Document what was done
   - Note any new tasks spawned

4. UPDATE CASCADE
   - Update all affected metadata
   - Synchronize documentation
   - Update integration maps
   - Verify completeness

5. REPEAT
   - Continue until TODO.md empty
   - Generate new tasks if needed
   - Work until production ready

=============================================================================
                          FILE ORGANIZATION
=============================================================================

TASK FILES:
- tasks/TODO.md - Current active tasks only
- tasks/pending/PENDING_XXX.md - Blocked tasks (25 per file)
- tasks/completed/COMPLETED_XXX.md - Finished tasks (25 per file)

INDEX FILES:
- tasks/pending/PENDING_INDEX.md - Tracks pending tasks (100 entries max)
- tasks/completed/COMPLETED_INDEX.md - Tracks completed tasks (100 entries max)

METADATA FILES:
- /metadata/[mirrors source structure]
- One .metadata.md file per code file
- Documents purpose, integrations, testing

DOCUMENTATION:
- MAIN_README.md - Project blueprint (never changes core vision)
- README.md - Living documentation (updates with progress)
- /docs/ - Additional documentation

=============================================================================
                         TASK ENTRY FORMAT
=============================================================================

IN TODO.md:
### [TASK-ID] Task Title
- **Priority**: CRITICAL|HIGH|NORMAL|LOW
- **Status**: IN_PROGRESS|NOT_STARTED
- **Estimated**: X hours
- **Description**: Clear description
- **Acceptance Criteria**:
  - [ ] Specific requirement 1
  - [ ] Specific requirement 2
- **Technical Notes**: Implementation guidance

WHEN MOVING TO COMPLETED:
### Task #001 (File Position: 1/25)
- **Task ID**: [TASK-ID]
- **Title**: Task Title
- **Completed On**: 2025-01-28 10:30:00
- **Files Changed**:
  - CREATE: /path/to/new/file.ext
  - MODIFY: /path/to/existing/file.ext
  - METADATA: /metadata/path/to/file.metadata.md
- **Integration Points**:
  - Component A → Component B
- **Notes**: What was accomplished

=============================================================================
                        QUALITY REQUIREMENTS
=============================================================================

CODE QUALITY:
- Complete implementations only (no TODOs in code)
- Comprehensive error handling
- Type safety (no 'any' types)
- Clear variable/function names
- Comments for complex logic
- Security considerations
- Performance awareness

DOCUMENTATION QUALITY:
- Every file has metadata
- All integrations documented
- Clear component relationships
- Testing approach defined
- No ambiguous descriptions

=============================================================================
                    WHEN YOU'RE STUCK OR BLOCKED
=============================================================================

IF A TASK IS BLOCKED:
1. Move it to tasks/pending/PENDING_XXX.md
2. Document why it's blocked
3. Create new tasks to unblock if possible
4. Find other tasks to work on
5. Continue making progress

IF NO TASKS REMAIN:
1. Analyze project completeness
2. Check test coverage
3. Review documentation
4. Identify missing features
5. Generate new tasks
6. Continue development

=============================================================================
                      PROJECT COMPLETION CRITERIA
=============================================================================

A PROJECT IS COMPLETE WHEN:
✓ All planned features implemented
✓ Comprehensive error handling throughout
✓ All integrations documented
✓ Test coverage adequate (>80%)
✓ Documentation complete and current
✓ Performance optimized
✓ Security reviewed
✓ Accessibility considered
✓ Build/deployment configured
✓ No known bugs

=============================================================================
                          REMEMBER ALWAYS
=============================================================================

1. You are building production software
2. Quality matters more than speed
3. Documentation enables continuation
4. Tasks track all progress
5. Integration points are critical
6. Every file needs metadata
7. Updates cascade through system
8. File limits trigger new files
9. Indexes track distributed tasks
10. PANDA ensures project success

=============================================================================
                          BEGIN DEVELOPMENT
=============================================================================

Start by checking if tasks/TODO.md exists:
- If YES: Select the highest priority task and begin
- If NO: Create it with initial tasks based on project type

Work autonomously following PANDA protocols until the project is production 
ready. You have unlimited time - focus on quality and completeness.

PANDA v3.0 - Developed by FatStinkyPanda
=============================================================================